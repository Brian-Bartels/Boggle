{"version":3,"sources":["components/Boggle/Boggle.js","style.js","components/Boggle/BoggleCharacter.js","components/Grid/Grid.js","components/Button/Button.js","components/Text/Text.js","components/Boggle/BoggleLayout.js","index.js"],"names":["Boggle","min","max","Math","ceil","floor","random","collection","randomIntExclusive","length","A","B","rounds","N","i","j","swap","constructor","build","this","boardSize","DEFAULT_BOARD_SIZE","minWordSize","DEFAULT_MINIMUM_WORD_SIZE","minConsonantCount","DEFAULT_MINIMUM_CONSONANT_COUNT","minVowelCount","DEFAULT_MINIMUM_VOWEL_COUNT","populateBoard","createBoard","defaultValue","Array","from","fill","chars","board","boardState","push","randomChoice","VOWELS","CONSONANTS","concat","charCount","badBoard","badCount","key","console","log","toUpperCase","shuffle","r","c","pop","isValidPos","px","nx","abs","validateSelect","word","nr","nc","pr","pc","validateUnselect","MAXIMUM_REPEAT_COUNT","MAXIMUM_Q_COUNT","BoggleBuiler","withWordSize","wordSize","withVowelCount","vowelCount","withConsonantCount","consonantCount","style","Grid","display","gridTemplateAreas","gridRowGap","gridColumnGap","padding","fluid","alignItems","justifyItems","height","Word","gridArea","fontSize","fontFamily","textTransform","letterSpacing","Time","StartButton","justifySelf","margin","SubmitWordButton","alignSelf","ClearWordButton","GameBoard","gridTemplateRows","gridTemplateColumns","cursor","GameCharacter","gridColumnStart","gridRowStart","background","fontWeight","borderStyle","borderSize","boxShadow","textAlign","width","BoggleCharacter","char","row","col","isSelected","isLast","handleClick","borderColor","opacity","onClick","children","Button","text","disabled","Text","BoggleLayout","Component","state","initialGameState","handleStart","tempTime","startTime","undefined","interval","clearInterval","setState","time","startCountdown","handleInvalidSelection","window","alert","handleInvalidUnselection","toggleSelected","Game","handleResetWord","score","map","join","renderBoard","String","seconds","snd","Audio","setInterval","currentTime","play","handleChange","event","target","value","isNaN","parseInt","render","RestartButton","open","type","onChange","document","getElementById"],"mappings":"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","file":"static/js/main.f08c19bf.chunk.js","sourcesContent":["export class Boggle {\n  static VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  static CONSONANTS = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"qu\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\n  // Board\n  static DEFAULT_BOARD_SIZE = 4;\n  static DEFAULT_MINIMUM_WORD_SIZE = 3;\n  static DEFAULT_MINIMUM_VOWEL_COUNT = 4;\n  static DEFAULT_MINIMUM_CONSONANT_COUNT = 4;\n  static MAXIMUM_REPEAT_COUNT = 4;\n  static MAXIMUM_Q_COUNT = 1;\n\n  static randomIntExclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  static randomChoice(collection) {\n    const choice = Boggle.randomIntExclusive(0, collection.length);\n    return collection[choice];\n  }\n\n  static swap(collection, A, B) {\n    [collection[A], collection[B]] = [collection[B], collection[A]];\n  }\n\n  static shuffle(collection, rounds = 3) {\n    const N = collection.length;\n\n    for (let i = 0; i < N * rounds; i++) {\n      const j = Boggle.randomIntExclusive(0, N);\n      Boggle.swap(collection, i % N, j);\n    }\n  }\n\n  constructor(build) {\n    this.boardSize = build.boardSize || Boggle.DEFAULT_BOARD_SIZE;\n    this.minWordSize = build.minWordSize || Boggle.DEFAULT_MINIMUM_WORD_SIZE;\n    this.minConsonantCount = build.minConsonantCount || Boggle.DEFAULT_MINIMUM_CONSONANT_COUNT;\n    this.minVowelCount = build.minVowelCount || Boggle.DEFAULT_MINIMUM_VOWEL_COUNT;\n    this.populateBoard();\n  }\n\n  createBoard(N, defaultValue) {\n    return Array.from(new Array(N), () => new Array(N).fill(defaultValue));\n  }\n\n  populateBoard() {\n    var chars = [];\n    const N = this.boardSize;\n    this.board = this.createBoard(N);\n    this.boardState = this.createBoard(N, false);\n    while (true) {\n      // Generate required vowel quantity\n      for (let i = 0; i < this.minVowelCount; i++) {\n        chars.push(Boggle.randomChoice(Boggle.VOWELS));\n      }\n\n      // Generate required consonant quantity\n      for (let i = 0; i < this.minConsonantCount; i++) {\n        chars.push(Boggle.randomChoice(Boggle.CONSONANTS));\n      }\n\n      // Generate remaining vowel/consonant quantity\n      while (chars.length < N * N) {\n        chars.push(Boggle.randomChoice(Boggle.VOWELS.concat(Boggle.CONSONANTS)));\n      }\n\n      var charCount = {};\n      var badBoard = false;\n      for (var i=0; i < chars.length; i++) {\n        if (charCount[chars[i]]) {\n          charCount[chars[i]]++;\n        } else {\n          charCount[chars[i]] = 1;\n        }\n      }\n      \n      // count of QU | J | Z | X\n      var badCount = 0;\n      if (charCount[\"u\"] + charCount[\"qu\"] >= 3) {\n        console.log(\"Too Many U's\");\n        console.log(charCount);\n        badBoard = true;\n      }\n      for (var key in charCount) {\n        if (charCount[key] >= 4) {\n          badBoard = true;\n        } else if (key.toUpperCase() === \"QU\" || key.toUpperCase() === 'J' || key.toUpperCase() === 'Z' || key.toUpperCase() === 'X') {\n          badCount += charCount[key];\n          if (charCount[key] > 2) {\n            badBoard = true;\n          }\n        }\n      }\n      if (badCount > 3) {\n        badBoard = true;\n      }\n      if (!badBoard) {\n        break;\n      } else {\n        // that board wasn't good, let's wipe it and try again\n        chars = [];\n      }\n    }\n    \n    \n    Boggle.shuffle(chars, 4);\n\n    for (let r = 0; r < N; r++) {\n      for (let c = 0; c < N; c++) {\n        this.board[r][c] = chars.pop();\n      }\n    }\n  }\n\n  isValidPos(px, nx) {\n    const N = this.boardSize;\n    return nx >= 0 && nx < N && Math.abs(px - nx) <= 1;\n  }\n\n  validateSelect(word, [nr, nc]) {\n    if (!word.length) return true;\n\n    const [pr, pc] = word[word.length - 1];\n\n    return this.isValidPos(pr, nr) && this.isValidPos(pc, nc);\n  }\n\n  validateUnselect(word, [nr, nc]) {\n    if (!word.length) return false;\n\n    const [pr, pc] = word[word.length - 1];\n\n    return pr === nr && pc === nc;\n  }\n}\n\nexport class BoggleBuiler {\n  withWordSize({ wordSize }) {\n    this.minWordSize = wordSize;\n    return this;\n  }\n\n  withVowelCount({ vowelCount }) {\n    this.minVowelCount = vowelCount;\n    return this;\n  }\n\n  withConsonantCount({ consonantCount }) {\n    this.minConsonantCount = consonantCount;\n    return this;\n  }\n\n  build() {\n    return new Boggle(this);\n  }\n}\n","const style = {\n  Grid: {\n    display: \"grid\",\n    gridTemplateAreas:\n      '\"start word word word\" \"board board board board\" \"submit clear entry time\"',\n    //gridTemplateRows: \"auto minmax(auto, 10%) auto\",\n    //gridTemplateColumns: \"auto auto minmax(auto, 15%) minmax(auto, 15%)\",\n    gridRowGap: \"1rem\",\n    gridColumnGap: \"2rem\",\n    padding: \"1rem 4rem 1rem\",\n    fluid: \"true\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    height: \"100%\"\n  },\n  Word: {\n    gridArea: \"word\",\n    fontSize: \"2.5rem\",\n    fontFamily: \"Concert One, cursive\",\n    textTransform: \"uppercase\",\n    letterSpacing: \"0.25rem\"\n  },\n  Time: {\n    gridArea: \"time\",\n    fontSize: \"2.5rem\",\n    fontFamily: \"Concert One, cursive\",\n    textTransform: \"uppercase\",\n    letterSpacing: \"0.25rem\"\n  },\n  StartButton: {\n    gridArea: \"start\",\n    justifySelf: \"flex-end\",\n    margin: \"1rem\"\n  },\n  SubmitWordButton: {\n    gridArea: \"submit\",\n    alignSelf: \"flex-start\",\n    justifySelf: \"flex-end\",\n    margin: \"1rem\"\n  },\n  ClearWordButton: {\n    gridArea: \"clear\",\n    alignSelf: \"flex-start\",\n    justifySelf: \"flex-start\",\n    margin: \"1rem\"\n  },\n  GameBoard: N => ({\n    display: \"grid\",\n    gridArea: \"board\",\n    gridTemplateRows: `repeat(${N}, auto)`,\n    gridTemplateColumns: `repeat(${N}, auto)`,\n    gridRowGap: \"0.4rem\",\n    gridColumnGap: \"0.4rem\",\n    justifyItems: \"center\",\n    alignItems: \"center\",\n    cursor: \"pointer\"\n  }),\n  GameCharacter: {\n    fontSize: \"3.5rem\",\n    fontFamily: \"Concert One, cursive\",\n    textTransform: \"uppercase\",\n    gridColumnStart: \"auto\",\n    gridRowStart: \"auto\",\n    background: \"linear-gradient(to top right, #E6E6FA, #F0E6FA)\",\n    fontWeight: 550,\n    borderStyle: \"solid\",\n    borderSize: \"0.5rem\",\n    boxShadow: \"0.2rem 0.2rem 0.2rem #888888\",\n    textAlign: \"center\",\n    width: \"5rem\",\n    height: \"5rem\",\n    padding: \"1.5rem\"\n  },\n};\n\nexport default style;\n","import React from \"react\";\n\nconst BoggleCharacter = ({ char, row, col, isSelected, isLast, handleClick, style }) => {\n  style = {\n    borderColor: isLast ? \"yellow\" : isSelected ? \"blue\" : \"black\",\n    opacity: isSelected ? \"0.60\" : \"1.0\",\n    ...style\n  };\n\n  return (\n    <div style={style} onClick={() => handleClick(row, col)}>\n      {char}\n    </div>\n  );\n};\n\nexport default BoggleCharacter;\n","import React from \"react\";\n\nconst Grid = ({ children, style }) => {\n  return <section style={style}>{children}</section>;\n};\n\nexport default Grid;\n","import React from \"react\";\n\nconst Button = ({ text, disabled, handleClick, style }) => {\n  return (\n    <div style={style}>\n      <button disabled={disabled} onClick={handleClick}>\n        {text}\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Text = ({ text, style }) => {\n  return (\n    <div style={style}>\n      <h3>{text}</h3>\n    </div>\n  );\n};\n\nexport default Text;\n","import React, { Component } from \"react\";\nimport { BoggleBuiler } from \"./Boggle\";\nimport style from \"../../style\";\nimport BoggleCharacter from \"./BoggleCharacter\";\nimport Grid from \"../Grid/Grid\";\nimport Button from \"../Button/Button\";\nimport Text from \"../Text/Text\";\n\nclass BoggleLayout extends Component {\n\n  static get initialGameState() {\n    return {\n      score: 0,\n      word: [],\n      time: 120,\n      startTime: 120,\n      Game: new BoggleBuiler().build()\n    };\n  }\n\n  state = BoggleLayout.initialGameState;\n\n  get word() {\n    return this.state.word.map(([r, c]) => this.state.Game.board[r][c]).join(\"\");\n  }\n\n  renderBoard() {\n    const N = this.state.Game.boardSize;\n    const word = this.state.word;\n    const board = this.state.Game.board;\n    const boardState = this.state.Game.boardState;\n    const isLast = (r, c) => word.length && word[word.length - 1][0] === r && word[word.length - 1][1] === c;\n    const chars = [];\n\n    for (let r = 0; r < N; r++) {\n      for (let c = 0; c < N; c++) {\n        chars.push(\n          <BoggleCharacter\n            key={String(r) + String(c)}\n            handleClick={this.toggleSelected}\n            char={board[r][c]}\n            isLast={isLast(r, c)}\n            isSelected={boardState[r][c]}\n            row={r}\n            col={c}\n            style={style.GameCharacter}\n          />\n        );\n      }\n    }\n\n    return chars;\n  }\n\n  ////////////////////////\n  // Event Handlers\n  ////////////////////////\n  handleStart = () => {\n    var tempTime = this.state.startTime;\n    if (this.state.interval !== undefined) {\n      clearInterval(this.state.interval);\n    }\n    this.setState(BoggleLayout.initialGameState);\n    this.setState({time: tempTime, startTime: tempTime});\n    this.startCountdown(this.state.time);\n  };\n\n  async startCountdown(seconds) {\n    var snd = new Audio(\"data:audio/wav;base64,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\");  \n      \n    const interval = setInterval(() => {\n      this.setState({\n        time: this.state.time - 1\n      });\n      if (this.state.time <= 0) {\n        clearInterval(interval);\n        snd.currentTime = 0;\n        snd.play();\n      }\n    }, 1000);\n    this.setState({interval});\n    return;\n  }\n\n  handleInvalidSelection = () => {\n    window.alert(\"Selected character must be adjacent (horizontal, vertical, or diagonal) to last selected character\");\n  };\n\n  handleInvalidUnselection = () => {\n    window.alert(\"Unselected character must be the same as last selected character\");\n  };\n\n  toggleSelected = (r, c) => {\n    let word = this.state.word;\n\n    const Game = this.state.Game;\n    const state = !Game.boardState[r][c];\n\n    if (state) {\n      if (Game.validateSelect(word, [r, c])) {\n        Game.boardState[r][c] = state;\n        word.push([r, c]);\n      } else {\n        this.handleInvalidSelection();\n      }\n    } else {\n      if (Game.validateUnselect(word, [r, c])) {\n        Game.boardState[r][c] = state;\n        word.pop();\n      } else {\n        this.handleInvalidUnselection();\n      }\n    }\n\n    this.setState({\n      Game,\n      word\n    });\n  };\n\n  handleResetWord = () => {\n    const Game = this.state.Game;\n    Game.boardState = Game.createBoard(Game.boardSize, false);\n\n    this.setState({\n      Game,\n      word: []\n    });\n  };\n\n  handleChange(event) {\n    if (event.target.value === \"\") {\n      this.setState({startTime: 0});\n    } else if (!isNaN(String(event.target.value))) {\n      this.setState({startTime: parseInt(event.target.value, 10)});\n    }\n  }\n\n  render() {\n    const { Game } = this.state;\n\n    return (\n      <Grid style={style.Grid}>\n\n        {/*TOP*/}\n        <Button text=\"New Game\" style={style.RestartButton} handleClick={this.handleStart} />\n        <Text style={style.Word} text={this.word} />\n\n        {/*MIDDLE*/}\n        <Grid style={style.GameBoard(Game.boardSize)}>{this.renderBoard()}</Grid>\n\n        {/*BOTTOM*/}\n        <Button text=\"Check Word\" disabled={!this.state.word.length} style={style.SubmitWordButton} handleClick={() => \n          {\n            window.open(`https://www.merriam-webster.com/dictionary/${this.word}`);\n            this.handleResetWord();\n          }} />\n        <Button text=\"Clear Word\" disabled={!this.state.word.length} style={style.ClearWordButton} handleClick={this.handleResetWord} />\n        <label>\n          Total Seconds: \n          <input type=\"text\" value={this.state.startTime} onChange={(event) => this.handleChange(event)}/>\n        </label>\n        <Text style={style.Time} text={this.state.time} />\n      </Grid>\n    );\n  }\n}\n\nexport default BoggleLayout;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport BoggleLayout from \"./components/Boggle/BoggleLayout\";\n\nrender(<BoggleLayout />, document.getElementById(\"root\"));\n"],"sourceRoot":""}